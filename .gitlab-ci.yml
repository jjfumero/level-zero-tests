stages:
  - build
  - run
  - deploy

build-windows:
  stage: build
  tags:
    - ilab
    - win
    - l0win-0  # lock to single VM for caching purposes
  only:
    - merge_requests
    - master
    - web
  variables:
    # ensures each job execution gets its own clone directory
    GIT_CLONE_PATH: C:\gitlab-runner/builds/$CI_PROJECT_NAME/$CI_JOB_NAME/$CI_JOB_ID/src
    BUILDER_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-${CI_JOB_NAME}
  script:
    - del C:\clcache\stats.txt
    - docker info
    # Create the builder image using the *local* build cache, since windows
    # images are huge and take forever to build. Job is currently locked to a
    # single VM so a single build cache can be used. Docker prohibits the local
    # build cache from being used if cache-from is specified, so the better
    # caching option for now is to stick to a single local build cache.
    - docker build
        -t %BUILDER_IMAGE%:%CI_COMMIT_REF_SLUG%
        -t %BUILDER_IMAGE%:latest
        --build-arg VS2019PRO_PRODUCT_KEY=%VS2019PRO_PRODUCT_KEY%
        .\docker\%CI_JOB_NAME%
    - docker run
        --rm
        -v %cd%:C:\project
        -w C:\project
        -v C:\clcache:C:\clcache
        -e CLCACHE_DIR=C:\clcache
        -v C:\irepo-cache:C:\irepo-cache
        -e IREPO_CACHE_DIR=C:\irepo-cache
        %BUILDER_IMAGE%:%CI_COMMIT_REF_SLUG%
        .\ci-build-windows.bat
    # Can't use wildcards for matching subdirerctories in windows...
    - mkdir out\windows &&
      move build\out\conformance_tests out\windows\conformance_tests &&
      move build\out\perf_tests out\windows\perf_tests
    # Use a file to signal success/fail because error codes do not correctly
    # propagate
    - if not exist windows_build_succeeded (
          exit /b 1
      )
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - build/VERSION
      - build/VERSION_SUFFIX
      - out

build-ubuntu1804:
  stage: build
  image: docker:19.03.1
  only:
    - merge_requests
    - master
    - web
  tags:
    - caas
    - dind
    - docker
    - linux
    - privileged
    - production
  services:
    - amr-registry.caas.intel.com/caas/docker:19.03.1-dind
  variables:
    DOCKER_TLS_CERTDIR: ""  # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2  # better performance for dind
    BUILDER_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    # Workaround for https://gitlab.com/gitlab-org/gitlab-ce/issues/27436
    HARBOR_USER2: ${HARBOR_USER}
    HARBOR_TOKEN2: ${HARBOR_TOKEN}
  script:
    - docker info
    - docker login -u ${HARBOR_USER2} -p ${HARBOR_TOKEN2} ${HARBOR_HOST}
    # Create the builder image, potentially using prior versions as a cache.
    # Two tags are considered for image caching:
    #   - ${CI_COMMIT_REF_SLUG}, which corresponds to the latest (if any)
    #     version of this build image used on this ref/branch. This allows
    #     development branches that make major changes to the dockerfiles to not
    #     interfere too much with other branches.
    #   - latest, which is just whatever the most recent version of this build
    #     image that was built is, regardless of ref/branch. This is a fallback
    #     in the event that the job is the first job to be run for a particular
    #     ref/branch.
    - docker pull ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG} ||
      docker pull ${BUILDER_IMAGE}:latest ||
      true
    - docker build
        --cache-from ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        --cache-from ${BUILDER_IMAGE}:latest
        -t ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        -t ${BUILDER_IMAGE}:latest
        ./docker/${CI_JOB_NAME}
    # Perform the build inside the builder image
    - docker run
        --rm
        -v ${PWD}:/root/project
        -w /root/project
        -v /ccache:/ccache
        -e CCACHE_DIR=/ccache
        -e CCACHE_BASEDIR=/root/project
        -v /irepo-cache:/irepo-cache
        -e IREPO_CACHE_DIR=/irepo-cache
        ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        ./ci-build-linux.sh
    - mkdir -p out/ubuntu1804;
      mv build/out/* out/ubuntu1804
    # Upload the builder images used only if the build succeeded
    - docker push ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker push ${BUILDER_IMAGE}:latest
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - build/VERSION
      - build/VERSION_SUFFIX
      - third_party/level_zero_linux
      - out
      - build/clang_format_results.patch

run-ubuntu1804:
  stage: run
  image: docker:19.03.1
  only:
    - merge_requests
    - web
  tags:
    - caas
    - dind
    - docker
    - linux
    - privileged
    - production
  services:
    - amr-registry.caas.intel.com/caas/docker:19.03.1-dind
  variables:
    DOCKER_TLS_CERTDIR: ""  # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2  # better performance for dind
    RUNTIME_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-run-ubuntu1804
    # Workaround for https://gitlab.com/gitlab-org/gitlab-ce/issues/27436
    HARBOR_USER2: ${HARBOR_USER}
    HARBOR_TOKEN2: ${HARBOR_TOKEN}
  script:
    - docker info
    - docker login -u ${HARBOR_USER2} -p ${HARBOR_TOKEN2} ${HARBOR_HOST}
    - docker pull ${RUNTIME_IMAGE}:${CI_COMMIT_REF_SLUG} ||
      docker pull ${RUNTIME_IMAGE}:latest ||
      true
    - docker build
        --cache-from ${RUNTIME_IMAGE}:${CI_COMMIT_REF_SLUG}
        --cache-from ${RUNTIME_IMAGE}:latest
        -t ${RUNTIME_IMAGE}:${CI_COMMIT_REF_SLUG}
        -t ${RUNTIME_IMAGE}:latest
        --build-arg QB_USER
        --build-arg QB_PASSWORD
        ./docker/run-ubuntu1804
    # TODO: parse output of --gtest_list_tests
    - docker pull amr-registry.caas.intel.com/level-zero-linux-compute/fulsim:gen9-r36707
    - touch run.log
    - tail -f run.log &
      LOG_TAIL_PID=$!;
      for test in $(find build/out/conformance_tests -executable -type f); do
          test=$(basename $test);
          echo "Launching execution containers for $test";
          docker run
            --detach
            --name fulsim-$test
            amr-registry.caas.intel.com/level-zero-linux-compute/fulsim:gen9-r36707
            AubLoad -device skl.2.a0 -socket tcp;
          docker run
            --detach
            --name runtime-$test
            --network=container:fulsim-$test
            -v ${PWD}:/root/project
            -w /root/project
            ${RUNTIME_IMAGE}:${CI_COMMIT_REF_SLUG}
            ./ci-run-linux.sh $test;
      done;
      docker wait $(docker ps -a -q -f "label=role=runtime") &>/dev/null;
      kill $LOG_TAIL_PID
    - docker push ${RUNTIME_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker push ${RUNTIME_IMAGE}:latest
    - cat run_results/*
  artifacts:
    paths:
      - run_results

deploy-artifactory:
  stage: deploy
  only:
    - master
  tags:
    - caas
    - docker
    - linux
  image:
    name: amr-registry.caas.intel.com/level-zero-linux-compute/gta-asset:1.0.432
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - VERSION="$(cat build/VERSION)-$(cat build/VERSION_SUFFIX)";
      echo "Version $VERSION";
      for platform in `ls -1 out`; do
          gta-asset push
            --root-url https://gfx-assets.fm.intel.com/artifactory
            -u ${ARTIFACTORY_USER}
            -p ${ARTIFACTORY_PASSWORD}
            gfx-sandbox-fm/level-zero-conformance
            $platform
            $VERSION
            ./out/$platform/conformance_tests;
          gta-asset push
            --root-url https://gfx-assets.fm.intel.com/artifactory
            -u ${ARTIFACTORY_USER}
            -p ${ARTIFACTORY_PASSWORD}
            gfx-sandbox-fm/level-zero-perf
            $platform
            $VERSION
            ./out/$platform/perf_tests;
      done
    # also push specially archived versions to work with the test_compute
    # plugin... ugh
    - gta-asset push
        --root-url https://gfx-assets.fm.intel.com/artifactory
        --no-archive
        -u ${ARTIFACTORY_USER}
        -p ${ARTIFACTORY_PASSWORD}
        gfx-sandbox-fm
        level-zero-conformance-archived
        $VERSION
        ./out/ubuntu1804/archived/conformance-tests-Linux.tar.gz
    - gta-asset push
        --root-url https://gfx-assets.fm.intel.com/artifactory
        --no-archive
        -u ${ARTIFACTORY_USER}
        -p ${ARTIFACTORY_PASSWORD}
        gfx-sandbox-fm
        level-zero-perf-archived
        $VERSION
        ./out/ubuntu1804/archived/perf-tests-Linux.tar.gz
