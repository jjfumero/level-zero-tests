stages:
  - build
  - deploy

ubuntu1804:
  stage: build
  image: docker:stable
  only:
    - branches
    - tags
  tags: ['caas', 'docker', 'linux']
  services:
    - amr-registry.caas.intel.com/caas/docker:stable-dind
  variables:
    DOCKER_HOST: tcp://localhost:2375/  # Kubernetes executor
    # DOCKER_HOST: tcp://docker:2375/  # non- Kubernetes executor
    DOCKER_DRIVER: overlay2  # better performance for dind
    BUILDER_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    # Workaround for https://gitlab.com/gitlab-org/gitlab-ce/issues/27436
    HARBOR_USER2: ${HARBOR_USER}
    HARBOR_TOKEN2: ${HARBOR_TOKEN}
  script:
    - docker info
    - docker login -u ${HARBOR_USER2} -p ${HARBOR_TOKEN2} ${HARBOR_HOST}
    # Create the builder image, potentially using prior versions as a cache.
    # Two tags are considered for image caching:
    #   - ${CI_COMMIT_REF_SLUG}, which corresponds to the latest (if any)
    #     version of this build image used on this ref/branch. This allows
    #     development branches that make major changes to the dockerfiles to not
    #     interfere too much with other branches.
    #   - latest, which is just whatever the most recent version of this build
    #     image that was built is, regardless of ref/branch. This is a fallback
    #     in the event that the job is the first job to be run for a particular
    #     ref/branch.
    - docker pull ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG} ||
      docker pull ${BUILDER_IMAGE}:latest ||
      true
    - docker build
        --cache-from ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        --cache-from ${BUILDER_IMAGE}:latest
        -t ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        -t ${BUILDER_IMAGE}:latest
        --build-arg GFX_ASSETS_FM_JFROG_TOKEN=${ARTIFACTORY_APIKEY}
        ./docker/ubuntu1804
    # Perform the build inside the builder image
    - docker run
        --rm
        -v ${PWD}:/root/project
        -w /root/project
        -e GERRITGFX_HTTP_USER
        -e GERRITGFX_HTTP_PASSWORD
        -v /ccache:/ccache
        -e CCACHE_DIR=/ccache
        -e CCACHE_BASEDIR=/root/project
        ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        ./ci-build-linux.sh
    # Upload the builder images used only if the build succeeded
    - docker push ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker push ${BUILDER_IMAGE}:latest
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - intel-level-zero-perftests-*-Source.*
      - intel-level-zero-perftests-*-Linux.*

deploy-artifactory:
  stage: deploy
  only:
    - tags
  tags: ['caas', 'docker', 'linux']
  image: retgits/jfrog-cli:1.23.2-alpine
  script:
    - jfrog rt config
        --url ${ARTIFACTORY_URL}
        --apikey ${ARTIFACTORY_APIKEY}
        artifactory
    - jfrog rt build-add-git ${CI_PROJECT_NAME} ${CI_PIPELINE_ID}
    - jfrog rt upload
        --build-name ${CI_PROJECT_NAME}
        --build-number ${CI_PIPELINE_ID}
        "./intel-level-zero-perftests-*.tar.gz"
        ${ARTIFACTORY_REPO}/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/
    - echo "Build assets uploaded to ${ARTIFACTORY_URL}/${ARTIFACTORY_REPO}/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}"
    - jfrog rt build-publish ${CI_PROJECT_NAME} ${CI_PIPELINE_ID}
