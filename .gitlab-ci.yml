stages:
  - build
  - deploy

windows:
  stage: build
  tags:
    - ilab
    - win
    - l0win-0  # lock to single VM for caching purposes
  only:
    - merge_requests
    - tags
  variables:
    # ensures each job execution gets its own clone directory
    GIT_CLONE_PATH: C:\gitlab-runner/builds/$CI_PROJECT_NAME/$CI_JOB_NAME/$CI_JOB_ID/src
    BUILDER_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-${CI_JOB_NAME}
  script:
    - docker info
    # Create the builder image using the *local* build cache, since windows
    # images are huge and take forever to build. Job is currently locked to a
    # single VM so a single build cache can be used. Docker prohibits the local
    # build cache from being used if cache-from is specified, so the better
    # caching option for now is to stick to a single local build cache.
    - docker build
        -t %BUILDER_IMAGE%:%CI_COMMIT_REF_SLUG%
        -t %BUILDER_IMAGE%:latest
        --build-arg VS2019PRO_PRODUCT_KEY=%VS2019PRO_PRODUCT_KEY%
        .\docker\%CI_JOB_NAME%
    - docker run
        --rm
        -v %cd%:C:\project
        -w C:\project
        -e GERRITGFX_HTTP_USER
        -e GERRITGFX_HTTP_PASSWORD
        %BUILDER_IMAGE%:%CI_COMMIT_REF_SLUG%
        .\ci-build-windows.bat
    # Use a file to signal success/fail because error codes do not correctly
    # propagate
    - if not exist windows_build_succeeded (
          exit /b 1
      )

ubuntu1804:
  stage: build
  image: docker:19.03.1
  only:
    - merge_requests
    - tags
    - web
  tags:
    - caas
    - dind
    - docker
    - linux
    - privileged
    - production
  # workaround for https://soco.intel.com/message/5439810
  services:
    - name: amr-registry.caas.intel.com/caas/docker:19.03.0-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://localhost:2375/  # Kubernetes executor
    # DOCKER_HOST: tcp://docker:2375/  # non- Kubernetes executor
    DOCKER_DRIVER: overlay2  # better performance for dind
    BUILDER_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    # Workaround for https://gitlab.com/gitlab-org/gitlab-ce/issues/27436
    HARBOR_USER2: ${HARBOR_USER}
    HARBOR_TOKEN2: ${HARBOR_TOKEN}
  script:
    - docker info
    - docker login -u ${HARBOR_USER2} -p ${HARBOR_TOKEN2} ${HARBOR_HOST}
    # Create the builder image, potentially using prior versions as a cache.
    # Two tags are considered for image caching:
    #   - ${CI_COMMIT_REF_SLUG}, which corresponds to the latest (if any)
    #     version of this build image used on this ref/branch. This allows
    #     development branches that make major changes to the dockerfiles to not
    #     interfere too much with other branches.
    #   - latest, which is just whatever the most recent version of this build
    #     image that was built is, regardless of ref/branch. This is a fallback
    #     in the event that the job is the first job to be run for a particular
    #     ref/branch.
    - docker pull ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG} ||
      docker pull ${BUILDER_IMAGE}:latest ||
      true
    - docker build
        --cache-from ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        --cache-from ${BUILDER_IMAGE}:latest
        -t ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        -t ${BUILDER_IMAGE}:latest
        ./docker/${CI_JOB_NAME}
    # Perform the build inside the builder image
    - docker run
        --rm
        -v ${PWD}:/root/project
        -w /root/project
        -e GERRITGFX_HTTP_USER
        -e GERRITGFX_HTTP_PASSWORD
        -v /ccache:/ccache
        -e CCACHE_DIR=/ccache
        -e CCACHE_BASEDIR=/root/project
        ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        ./ci-build-linux.sh
    # Upload the builder images used only if the build succeeded
    - docker push ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker push ${BUILDER_IMAGE}:latest
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - intel-level-zero-tests-*-Source.*
      - intel-level-zero-*-Linux-*conformance-tests.*
      - intel-level-zero-*-Linux-*perf-tests.*
  artifacts:
    name: "$CI_JOB_NAME clang-format diff"
    when: on_failure
    expire_in: 1 week
    paths:
      - build/clang_format_results.patch

deploy-artifactory:
  stage: deploy
  only:
    - tags
  tags:
    - caas
    - docker
    - linux
  image:
    name: amr-registry-pre.caas.intel.com/level-zero-linux-compute/gta-asset:1.0.432
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - gta-asset delete
        --root-url https://gfx-assets.fm.intel.com/artifactory
        -u ${ARTIFACTORY_USER}
        -p ${ARTIFACTORY_PASSWORD}
        gfx-sandbox-fm
        level_zero_tests
        ${CI_COMMIT_TAG}
      || true
    - gta-asset push
        --root-url https://gfx-assets.fm.intel.com/artifactory
        -u ${ARTIFACTORY_USER}
        -p ${ARTIFACTORY_PASSWORD}
        gfx-sandbox-fm
        level_zero_tests
        ${CI_COMMIT_TAG}
        ./external_build_artifacts
