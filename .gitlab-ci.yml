stages:
  - build
  - run
  - pre-deploy
  - deploy
  - cleanup

build-windows:
  stage: build
  tags:
    - ilab
    - win
  only:
    - merge_requests
    - master
    - web
  variables:
    # ensures each job execution gets its own clone directory
    GIT_CLONE_PATH: C:\gitlab-runner/builds/$CI_PROJECT_NAME/$CI_PIPELINE_ID/$CI_JOB_NAME/src
    BUILDER_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-${CI_JOB_NAME}
  script:
    - del C:\clcache\stats.txt
    - docker info
    # Create the builder image using the *local* build cache, since windows
    # images are huge and take forever to build. Job is currently locked to a
    # single VM so a single build cache can be used. Docker prohibits the local
    # build cache from being used if cache-from is specified, so the better
    # caching option for now is to stick to a single local build cache.
    - docker build
        -t %BUILDER_IMAGE%:%CI_COMMIT_REF_SLUG%
        -t %BUILDER_IMAGE%:latest
        --build-arg VS2019PRO_PRODUCT_KEY=%VS2019PRO_PRODUCT_KEY%
        .\docker\%CI_JOB_NAME%
    - docker run
        --rm
        -v %cd%:C:\project
        -w C:\project
        -v C:\clcache:C:\clcache
        -e CLCACHE_DIR=C:\clcache
        -e CLCACHE_OBJECT_CACHE_TIMEOUT_MS=30000
        -v C:\devtool-cache:C:\devtool-cache
        -e DEVTOOL_CACHE_DIR=C:\devtool-cache
        %BUILDER_IMAGE%:%CI_COMMIT_REF_SLUG%
        .\ci\ci-build-windows.bat
    # Use a file to signal success/fail because error codes do not correctly
    # propagate
    - if not exist windows_build_succeeded (
          exit /b 1
      )
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - build/VERSION
      - build/VERSION_SUFFIX
      - out

build-ubuntu1804:
  stage: build
  image: docker:19.03.1
  only:
    - merge_requests
    - master
    - web
  tags:
    - caas
    - dind
    - docker
    - linux
    - privileged
    - production
  services:
    - amr-registry.caas.intel.com/caas/docker:19.03.1-dind
  variables:
    DOCKER_TLS_CERTDIR: ""  # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2  # better performance for dind
    BUILDER_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}-${CI_JOB_NAME}
    # Workaround for https://gitlab.com/gitlab-org/gitlab-ce/issues/27436
    HARBOR_USER2: ${HARBOR_USER}
    HARBOR_TOKEN2: ${HARBOR_TOKEN}
  script:
    - docker info
    - docker login -u ${HARBOR_USER2} -p ${HARBOR_TOKEN2} ${HARBOR_HOST}
    # Create the builder image, potentially using prior versions as a cache.
    # Two tags are considered for image caching:
    #   - ${CI_COMMIT_REF_SLUG}, which corresponds to the latest (if any)
    #     version of this build image used on this ref/branch. This allows
    #     development branches that make major changes to the dockerfiles to not
    #     interfere too much with other branches.
    #   - latest, which is just whatever the most recent version of this build
    #     image that was built is, regardless of ref/branch. This is a fallback
    #     in the event that the job is the first job to be run for a particular
    #     ref/branch.
    - docker pull ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG} ||
      docker pull ${BUILDER_IMAGE}:latest ||
      true
    - docker build
        --cache-from ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        --cache-from ${BUILDER_IMAGE}:latest
        -t ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        -t ${BUILDER_IMAGE}:latest
        ./docker/${CI_JOB_NAME}
    # Perform the build inside the builder image
    - docker run
        --rm
        -v $PWD:$PWD
        -w $PWD
        -v /ccache:/ccache
        -e CCACHE_DIR=/ccache
        -e CCACHE_BASEDIR=$PWD
        -v /irepo-cache:/irepo-cache
        -e IREPO_CACHE_DIR=/irepo-cache
        ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
        ./ci/ci-build-linux.sh $PWD/out/ubuntu1804
    # Upload the builder images used only if the build succeeded
    - docker push ${BUILDER_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker push ${BUILDER_IMAGE}:latest
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - build/VERSION
      - build/VERSION_SUFFIX
      - third_party/level_zero_linux
      - out/ubuntu1804
      - build/clang_format_results.patch

run-linux:
  stage: run
  image: docker:19.03.1
  only:
    - merge_requests
    - master
    - web
  tags:
    - caas
    - dind
    - docker
    - linux
    - privileged
    - production
  dependencies:
    - build-ubuntu1804
  services:
    - amr-registry.caas.intel.com/caas/docker:19.03.1-dind
  variables:
    DOCKER_TLS_CERTDIR: ""  # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2  # better performance for dind
    IMAGE_NAME_PREFIX: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}
    # Workaround for https://gitlab.com/gitlab-org/gitlab-ce/issues/27436
    HARBOR_USER2: ${HARBOR_USER}
    HARBOR_TOKEN2: ${HARBOR_TOKEN}
  script:
    - docker info
    - docker login -u ${HARBOR_USER2} -p ${HARBOR_TOKEN2} ${HARBOR_HOST}
    - for image_type in ci-run fulsim-gen9-r36707 runtime-ubuntu1804; do
          IMAGE_NAME=${IMAGE_NAME_PREFIX}-$image_type;
          docker pull ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG} ||
          docker pull ${IMAGE_NAME}:latest ||
          true;
      done
    - IMAGE_NAME=${IMAGE_NAME_PREFIX}-ci-run;
      docker build
        --cache-from ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        --cache-from ${IMAGE_NAME}:latest
        -t ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        -t ${IMAGE_NAME}:latest
        ./docker/ci-run
    - IMAGE_NAME=${IMAGE_NAME_PREFIX}-fulsim-gen9-r36707;
      docker build
        --cache-from ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        --cache-from ${IMAGE_NAME}:latest
        --build-arg ARTIFACTORY_USER
        --build-arg ARTIFACTORY_PASSWORD
        --build-arg FULSIM_NAME=gen9
        --build-arg FULSIM_VERSION=r36707
        -t ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        -t ${IMAGE_NAME}:latest
        ./docker/fulsim
    - IMAGE_NAME=${IMAGE_NAME_PREFIX}-runtime-ubuntu1804;
      docker build
        --cache-from ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        --cache-from ${IMAGE_NAME}:latest
        -t ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        -t ${IMAGE_NAME}:latest
        ./docker/runtime-ubuntu1804
    - for image_type in ci-run fulsim-gen9-r36707 runtime-ubuntu1804; do
          IMAGE_NAME=${IMAGE_NAME_PREFIX}-$image_type;
          docker push ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG};
      done
    - mkdir case_logs;
      time docker run
        --rm
        -v ${PWD}:${PWD}
        -w ${PWD}
        -v /var/run/docker.sock:/var/run/docker.sock
        ${IMAGE_NAME_PREFIX}-ci-run:${CI_COMMIT_REF_SLUG}
        ./ci/ci-regression.py
          $PWD
          $PWD/out/ubuntu1804
          ${IMAGE_NAME_PREFIX}-runtime-ubuntu1804
          --parallelism 16
          --fulsim-skl-image ${IMAGE_NAME_PREFIX}-fulsim-gen9-r36707
          --fulsim-skl-cmd 'AubLoad -device skl.2.a0 -socket tcp'
          --output-junit-xml test_results.xml
    - for image_type in ci-run fulsim-gen9-r36707 runtime-ubuntu1804; do
          IMAGE_NAME=${IMAGE_NAME_PREFIX}-$image_type;
          docker push ${IMAGE_NAME}:latest;
      done
  artifacts:
    paths:
      - test_results.xml
    reports:
      junit: test_results.xml

# Special archived artifacts to support legacy compute-samples GTA plugin
create-legacy-artifacts:
  stage: pre-deploy
  only:
    - master
  tags:
    - caas
    - docker
    - linux
    - production
  dependencies:
    - build-ubuntu1804
    - build-windows
  image:
    name: amr-registry.caas.intel.com/level-zero-linux-compute/zip:latest
    entrypoint: ["/bin/bash"]
  variables:
    GIT_STRATEGY: none
  script:
    - for type in perf conformance; do
          mkdir -p archived/${type}_tests;
          cp -r out/ubuntu1804/${type}_tests archived/${type}_tests/${type}-tests-Linux;
          cp -r out/windows/${type}_tests archived/${type}_tests/${type}-tests-win64;
          pushd archived/${type}_tests;
          tar -czvf ${type}-tests-Linux.tar.gz ${type}-tests-Linux;
          zip -r ${type}-tests-win64.zip ${type}-tests-win64;
          rm -rf ${type}-tests-Linux;
          rm -rf ${type}-tests-win64;
          popd;
      done

  artifacts:
    paths:
      - archived

gen-deploy-aubs:
  stage: deploy
  image: docker:19.03.1
  only: []
  tags:
    - caas
    - dind
    - docker
    - linux
    - privileged
    - production
  dependencies:
    - build-ubuntu1804
  services:
    - amr-registry.caas.intel.com/caas/docker:19.03.1-dind
  variables:
    DOCKER_TLS_CERTDIR: ""  # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2  # better performance for dind
    IMAGE_NAME_PREFIX: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}
    # Workaround for https://gitlab.com/gitlab-org/gitlab-ce/issues/27436
    HARBOR_USER2: ${HARBOR_USER}
    HARBOR_TOKEN2: ${HARBOR_TOKEN}
  script:
    - docker info
    - docker login -u ${HARBOR_USER2} -p ${HARBOR_TOKEN2} ${HARBOR_HOST}
    - for image_type in ci-run runtime-ubuntu1804; do
          IMAGE_NAME=${IMAGE_NAME_PREFIX}-$image_type;
          docker pull ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG} ||
          docker pull ${IMAGE_NAME}:latest ||
          true;
      done
    - IMAGE_NAME=${IMAGE_NAME_PREFIX}-ci-run;
      docker build
        --cache-from ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        --cache-from ${IMAGE_NAME}:latest
        -t ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        -t ${IMAGE_NAME}:latest
        ./docker/ci-run
    - IMAGE_NAME=${IMAGE_NAME_PREFIX}-runtime-ubuntu1804;
      docker build
        --cache-from ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        --cache-from ${IMAGE_NAME}:latest
        -t ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}
        -t ${IMAGE_NAME}:latest
        ./docker/runtime-ubuntu1804
    - for image_type in ci-run runtime-ubuntu1804; do
          IMAGE_NAME=${IMAGE_NAME_PREFIX}-$image_type;
          docker push ${IMAGE_NAME}:${CI_COMMIT_REF_SLUG};
      done
    # TODO: Parallelism limited until better memory management can be worked out
    - mkdir aubs;
      time docker run
        --rm
        -v ${PWD}:${PWD}
        -w ${PWD}
        -v /var/run/docker.sock:/var/run/docker.sock
        ${IMAGE_NAME_PREFIX}-ci-run:${CI_COMMIT_REF_SLUG}
        ./ci/ci-generate-aubs.py
          $PWD
          $PWD/out/ubuntu1804
          ${IMAGE_NAME_PREFIX}-runtime-ubuntu1804
          $PWD/aubs
          --parallelism 2
    - for image_type in ci-run runtime-ubuntu1804; do
          IMAGE_NAME=${IMAGE_NAME_PREFIX}-$image_type;
          docker push ${IMAGE_NAME}:latest;
      done
    # Upload AUBs
    # This isn't a separate step because GitLab has a very low size limit for
    # artifacts. This is faster anyways.
    - VERSION="$(cat build/VERSION)-$(cat build/VERSION_SUFFIX)";
      for platform in $(ls -1 $PWD/aubs); do
          docker run
            --rm
            -v $PWD:$PWD
            -w $PWD
            amr-registry.caas.intel.com/level-zero-linux-compute/gta-asset:1.0.432 push
              --root-url https://gfx-assets.fm.intel.com/artifactory
              -u ${ARTIFACTORY_USER}
              -p ${ARTIFACTORY_PASSWORD}
              gfx-sandbox-fm
              level-zero-tests-aubs-$platform
              $VERSION
              aubs/$platform;
      done

deploy-artifactory:
  stage: deploy
  only:
    - master
  tags:
    - caas
    - docker
    - linux
    - production
  dependencies:
    - build-ubuntu1804
    - build-windows
    - create-legacy-artifacts
  image:
    name: amr-registry.caas.intel.com/level-zero-linux-compute/gta-asset:1.0.432
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - VERSION="$(cat build/VERSION)-$(cat build/VERSION_SUFFIX)";
      echo "Version $VERSION";
      for platform in `ls -1 out`; do
          for type in perf conformance; do
              gta-asset push
                --root-url https://gfx-assets.fm.intel.com/artifactory
                -u ${ARTIFACTORY_USER}
                -p ${ARTIFACTORY_PASSWORD}
                gfx-sandbox-fm/level-zero-${type}
                $platform
                $VERSION
                out/$platform/${type}_tests;
          done;
      done
    # also push specially archived versions to work with the test_compute
    # plugin... ugh
    - for type in perf conformance; do
          gta-asset push
            --root-url https://gfx-assets.fm.intel.com/artifactory
            --no-archive
            -u ${ARTIFACTORY_USER}
            -p ${ARTIFACTORY_PASSWORD}
            gfx-sandbox-fm
            level-zero-${type}-archived
            $VERSION
            archived/${type}_tests;
      done


cleanup-windows:
  stage: cleanup
  tags:
    - ilab
    - win
  only:
    - merge_requests
    - master
    - web
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - rmdir C:\gitlab-runner\builds\%CI_PROJECT_NAME%\%CI_PIPELINE_ID% /s /q
